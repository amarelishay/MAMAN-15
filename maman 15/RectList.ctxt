#BlueJ class context
comment0.target=RectList
comment0.text=\r\n\ The\ RectList\ class\ will\ represent\ a\ linked\ list\ of\ rectangles.\r\n\ The\ representation\ is\ made\ by\ a\ list\ that\ keeps\ track\ of\ the\ list\ of\ rectangles.\r\n\ Elishay\ Amar\ I.D\ 318840394\r\n
comment1.params=
comment1.target=RectList()
comment1.text=\r\n\ A\ builder\ that\ creates\ an\ empty\ list\ -\ initializes\ the\ top\ of\ the\ list\ to\ be\ null.\r\n
comment2.params=r
comment2.target=void\ addRect(RectangleA)
comment2.text=\r\n\ A\ method\ that\ receives\ as\ a\ rectangle\ parameter\ and\ adds\ it\ to\ the\ end\ of\ the\ list.\ \r\n\ If\ this\ rectangle\ is\ already\ on\ the\ list,\ the\ method\ will\ do\ nothing.\r\n\ @param\ RectangleA\ represents\ the\ rectangle\ that\ the\ method\ recives.\r\n
comment3.params=p
comment3.target=int\ howManyWithPoint(Point)
comment3.text=\r\n\ A\ method\ that\ receives\ as\ a\ parameter\ a\ point\ p\ (object\ from\ the\ Point\ class)\r\n\ And\ returns\ the\ number\ of\ rectangles\ in\ the\ list\ whose\ southwestern\ point\ is\ p.\r\n\ If\ there\ are\ no\ rectangles\ in\ the\ list\ (i.e.\ the\ list\ is\ empty)\ or\ there\ are\ no\ rectangles\ in\ the\ list\ whose\ point\ p\ is\ southwest,\ \r\n\ the\ method\ will\ return\ 0.\r\n\ @param\ p\ represents\ the\ point\ that\ the\ method\ recives.\r\n\ @return\ the\ number\ of\ rectangles\ in\ the\ list\ whose\ southwestern\ point\ is\ p.\r\n
comment4.params=
comment4.target=double\ longestDiagonal()
comment4.text=\r\n\ A\ method\ that\ returns\ the\ longest\ diagonal\ length\ between\ all\ the\ rectangles\ in\ the\ list.\r\n\ If\ there\ are\ no\ rectangles\ in\ the\ list\ (ie\ the\ list\ is\ empty)\ the\ method\ will\ return\ 0.\r\n\ @return\ the\ longest\ diagonal\ length\ between\ all\ the\ rectangles\ in\ the\ list.\r\n
comment5.params=
comment5.target=Point\ mostLeftRect()
comment5.text=\r\n\ A\ method\ that\ returns\ a\ copy\ of\ the\ southwestern\ point\ of\ the\ leftmost\ rectangle\ on\ the\ list.\r\n\ If\ there\ is\ more\ than\ one\ rectangle\ that\ is\ the\ leftmost,\ the\ method\ returns\ a\ copy\ of\ the\ southwest\ point\ of\r\n\ The\ first\ rectangle\ among\ them\ on\ the\ list.\ If\ there\ are\ no\ rectangles\ in\ the\ list\ (i.e.\r\n\ The\ list\ is\ empty)\ The\ method\ will\ return\ null.\r\n\ @return\ a\ copy\ of\ the\ southwestern\ point\ of\ the\ leftmost\ rectangle\ on\ the\ list.\r\n
comment6.params=
comment6.target=Point\ highestRect()
comment6.text=\r\n\ A\ method\ that\ returns\ a\ copy\ of\ the\ northeast\ spot\ of\ the\ highest\ rectangle.\r\n\ If\ there\ is\ more\ than\ one\ rectangle\ at\ the\ highest\ height,\r\n\ The\ method\ returns\ a\ copy\ of\ the\ northeastern\ point\ of\ the\ first\ rectangle\ on\ the\ list.\r\n\ If\ there\ are\ no\ rectangles\ in\ the\ list\ (i.e.\ the\ list\ is\ empty)\ the\ method\ will\ return\ null.\r\n\ @return\ a\ copy\ of\ the\ northeast\ spot\ of\ the\ highest\ rectangle.\r\n
comment7.params=
comment7.target=RectangleA\ minimalContainer()
comment7.text=\r\n\ Method\ that\ returns\ a\ new\ rectangle\ (object\ from\ the\ RectangleA\ class)\r\n\ Which\ is\ the\ rectangle\ with\ the\ minimum\ area\ that\ contains\ all\ the\ rectangles\ in\ the\ list.\ \r\n\ If\ there\ are\ no\ rectangles\r\n\ In\ the\ list\ (i.e.\ the\ list\ is\ empty)\ the\ method\ will\ return\ null.\r\n\ @return\ a\ new\ rectangle\ which\ is\ the\ rectangle\ with\ the\ minimum\ area\ that\ contains\ all\ the\ rectangles\ in\ the\ list.\ \r\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\r\n\ A\ method\ that\ returns\ a\ string\ that\ represents\ the\ list\ of\ rectangles.\r\n\ @return\ a\ string\ that\ represents\ the\ list\ of\ rectangles.\r\n
numComments=9
